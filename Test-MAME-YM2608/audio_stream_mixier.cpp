#include "audio_stream_mixier.hpp"
#include <algorithm>

AudioStreamMixier::AudioStreamMixier(chip::Chip& chip, uint32 rate, uint32 duration, QObject* parent) :
    QIODevice(parent),
    chip_(chip),
    rate_(rate),
    duration_(duration),
    bufferSampleSize_(rate * duration / 1000),
    tickIntrCountNumer_((rate * 5) >> 2),
    tickIntrCount_(0),
    isFirstRead_(true)
{
}

AudioStreamMixier::~AudioStreamMixier()
{
    if (hasRun()) stop();
}

void AudioStreamMixier::start()
{
    isFirstRead_ = true;
    open(QIODevice::ReadOnly);
}

void AudioStreamMixier::stop()
{
    close();
}

bool AudioStreamMixier::hasRun()
{
    return isOpen();
}

void AudioStreamMixier::setRate(uint32 rate)
{
    rate_ = rate;
    setBufferSampleSize(rate, duration_);
    tickIntrCountNumer_ = (rate * 5) >> 2;
}

void AudioStreamMixier::setDuration(uint32 duration)
{
    duration_ = duration;
    setBufferSampleSize(rate_, duration);
}

void  AudioStreamMixier::setBufferSampleSize(uint32 rate, uint32 duration)
{
    bufferSampleSize_ = rate * duration / 1000;
}

qint64 AudioStreamMixier::readData(char* data, qint64 maxlen)
{
    qint64 generatedCount;
    if (isFirstRead_) {   // Fill device buffer in first read
        generatedCount = maxlen >> 2;
        isFirstRead_ = false;
    }
    else {  // Fill appropriate sample counts
        generatedCount = std::min(bufferSampleSize_, (maxlen >> 2));
    }
    size_t requiredCount = static_cast<size_t>(generatedCount);
    int16* destPtr = reinterpret_cast<int16*>(data);

    size_t count;
    while (requiredCount) {
        if (!tickIntrCount_) {	// Read data
            // Read pattern data in here
            // 1 step = 6 ticks = 1/16 note
            int bpm = 120;
            tickIntrCount_ = tickIntrCountNumer_ / bpm;
        }

        count = std::min(tickIntrCount_, requiredCount);
        requiredCount -= count;
        tickIntrCount_ -= count;

        chip_.mix(destPtr, count);

        destPtr += (count << 1);	// Move head
    }

    return generatedCount << 2; // Return generated bytes count
}

qint64 AudioStreamMixier::writeData(const char *data, qint64 len)   // No use
{
    Q_UNUSED(data);
    Q_UNUSED(len);
    return 0;
}
